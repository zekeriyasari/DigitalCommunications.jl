var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = DigitalCommunications","category":"page"},{"location":"#DigitalCommunications","page":"Home","title":"DigitalCommunications","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [DigitalCommunications]","category":"page"},{"location":"#DigitalCommunications.ASK","page":"Home","title":"DigitalCommunications.ASK","text":"struct ASK{T} <: AbstractScheme\n\nAmplitude Shift Keying. The mapping rule is \n\n    s_m = A_m g(t) cos(w_c t)  quad m = 1 ldots M\n\nwhere A_m = 2m - 1 - M \n\n\n\n\n\n","category":"type"},{"location":"#DigitalCommunications.AWGNChannel","page":"Home","title":"DigitalCommunications.AWGNChannel","text":"mutable struct AWGNChannel{M}\n\nAdditive white Gaussian noise channel. AWGNChannel is defined by its snr. snr = Eb / No where Eb is the energy per bit and No/2 is the power spectral density of the channel noise. The relation between SNR, EsNo and EbNo is,\n\nbeginaligned\n    K * SNR = EsNo \n    EsNo = k times EbNo \nendaligned\n\nFields\n\nmode::Any\nValue of the noise mode(may be SNR, EsNo, EbNo in dB\nk::Int64\nBits per symbol\nsps::Int64\nSamples per symbol\n\n\n\n\n\n","category":"type"},{"location":"#DigitalCommunications.AbstractCoherentDetector","page":"Home","title":"DigitalCommunications.AbstractCoherentDetector","text":"abstract type AbstractCoherentDetector <: AbstractDetector\n\nAbstract type for cohorent detectors.\n\n\n\n\n\n","category":"type"},{"location":"#DigitalCommunications.AbstractDetector","page":"Home","title":"DigitalCommunications.AbstractDetector","text":"abstract type AbstractDetector\n\nAbstract type of detectors.\n\n\n\n\n\n","category":"type"},{"location":"#DigitalCommunications.AbstractNonCoherentDetector","page":"Home","title":"DigitalCommunications.AbstractNonCoherentDetector","text":"abstract type non-coherent detectors.\n\n\n\n\n\n","category":"type"},{"location":"#DigitalCommunications.AbstractScheme","page":"Home","title":"DigitalCommunications.AbstractScheme","text":"abstract type AbstractScheme\n\nAbstract type for modulation schemes such as PAM, ASK, PSK, FSK, QAM, etc. \n\n\n\n\n\n","category":"type"},{"location":"#DigitalCommunications.EbNo","page":"Home","title":"DigitalCommunications.EbNo","text":"mutable struct EbNo <: DigitalCommunications.AbstractNoiseMode\n\n\n\n\n\n","category":"type"},{"location":"#DigitalCommunications.EsNo","page":"Home","title":"DigitalCommunications.EsNo","text":"mutable struct EsNo <: DigitalCommunications.AbstractNoiseMode\n\n\n\n\n\n","category":"type"},{"location":"#DigitalCommunications.FSK","page":"Home","title":"DigitalCommunications.FSK","text":"struct FSK{T} <: AbstractScheme\n\nFrequency Shift Keying. The mapping rule is \n\n    s_m = A cos(w_c t + w_m t) quad m = 1 ldots M\n\nwhere w_m = m Delta f\n\n\n\n\n\n","category":"type"},{"location":"#DigitalCommunications.Generator","page":"Home","title":"DigitalCommunications.Generator","text":"struct Generator\n\nBit stream generator \n\nFields\n\nbits::Array{Bool,1}\n\n\n\n\n\n","category":"type"},{"location":"#DigitalCommunications.GrayCoding","page":"Home","title":"DigitalCommunications.GrayCoding","text":"struct GrayCoding <: AbstractCoding\n\nGray coding. \n\nnote: Note\nIn Gray coding just a single bit changes between adjacent symbols\n\nFields\n\npairs::Dict\n\n\n\n\n\n","category":"type"},{"location":"#DigitalCommunications.GrayCoding-Tuple{Int64}","page":"Home","title":"DigitalCommunications.GrayCoding","text":"GrayCoding(k)\n\nConstructs a GrayCoding with symbol size k. \n\nExample\n\njulia> gc = GrayCoding(2) \nGrayCoding(Dict([0, 1] => 2,[1, 1] => 3,[0, 0] => 1,[1, 0] => 4))\n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.MAPDetector","page":"Home","title":"DigitalCommunications.MAPDetector","text":"struct MAPDetector{ST, CT<:AbstractCoding} <: AbstractCoherentDetector\n\nFields\n\nsignals::Any\nBasis signals of the detector\nprobs::Array{Float64,1}\nA priori probabilities of the message symbols\nN0::Float64\n2 times the power spectral density of channel noise\ncoding::AbstractCoding\nSymbol coding\n\n\n\n\n\n","category":"type"},{"location":"#DigitalCommunications.MLDetector","page":"Home","title":"DigitalCommunications.MLDetector","text":"struct MLDetector{ST, CT<:AbstractCoding} <: AbstractCoherentDetector\n\nFields\n\nsignals::Any\nBasis signals of the detector\ncoding::AbstractCoding\nSymbol encoding\n\n\n\n\n\n","category":"type"},{"location":"#DigitalCommunications.Modulator","page":"Home","title":"DigitalCommunications.Modulator","text":"struct Modulator{ST<:AbstractScheme, CT<:AbstractCoding}\n\nBaseband digital modulator.\n\nFields\n\nscheme::AbstractScheme\nModulation scheme\ncoding::AbstractCoding\nCoding to map stream to code words\n\n\n\n\n\n","category":"type"},{"location":"#DigitalCommunications.PAM","page":"Home","title":"DigitalCommunications.PAM","text":"struct PAM{T} <: AbstractScheme\n\nPulse Amplitude Modulation. The mapping rule is \n\n    s_m = A_m p(t) quad m = 1 ldots M\n\n\n\n\n\n","category":"type"},{"location":"#DigitalCommunications.PSK","page":"Home","title":"DigitalCommunications.PSK","text":"struct PSK{T} <: AbstractScheme\n\nPhase Shift Keying. The mapping rule is \n\n    s_m = g(t) cos(w_c t - theta_m) quad m = 1 ldots M\n\nwhere theta_m = dfrac2pi(m - 1)M.\n\n\n\n\n\n","category":"type"},{"location":"#DigitalCommunications.QAM","page":"Home","title":"DigitalCommunications.QAM","text":"struct QAM{T} <: AbstractScheme\n\nFields\n\nM::Int64\nalphabet::Any\n\nQuadrature Amplitude Modulation. The mapping rule is \n\n    s_m = A_mi g(t) cos(w_c t) - A_mi g(t) sin(w_c t) \n\nwhere the amplitudes A_mi A_mq in  pm 1 pm 3 ldots pm (M - 1)  \n\n\n\n\n\n","category":"type"},{"location":"#DigitalCommunications.SNR","page":"Home","title":"DigitalCommunications.SNR","text":"mutable struct SNR <: DigitalCommunications.AbstractNoiseMode\n\n\n\n\n\n","category":"type"},{"location":"#DigitalCommunications.Q-Tuple{Any}","page":"Home","title":"DigitalCommunications.Q","text":"Q(x)\n\n\nQ-function defined as. \n\n    Q(x) = int_x^infty exp(-dfracx^22) dx\n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.alphabet-Tuple{Modulator}","page":"Home","title":"DigitalCommunications.alphabet","text":"alphabet(modulator)\n\n\nReturns the alphabet of the modulator modulator.\n\nExample\n\njulia> modulator = Modulator(PSK(4))\nModulator(scheme:4-PSK, coding:GrayCoding(M:4))\n\njulia> alphabet(modulator)\n4-element Array{Array{Float64,1},1}:\n [1.0, 0.0]\n [6.123233995736766e-17, 1.0]\n [-1.0, 1.2246467991473532e-16]\n [-1.8369701987210297e-16, -1.0]\n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.berask-Tuple{Any,Any}","page":"Home","title":"DigitalCommunications.berask","text":"berask(γb, M)\n\n\nReturns the probability of symbol error for the snr per bit γb and constallation size M for ASK and PAM signalling \n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.berfsk-Tuple{Any,Any}","page":"Home","title":"DigitalCommunications.berfsk","text":"berfsk(γs, M)\n\n\nReturns the probability of symbol error for the snr per bit γb and constallation size M for FSK signalling \n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.berpsk-Tuple{Any,Any}","page":"Home","title":"DigitalCommunications.berpsk","text":"berpsk(γs, M)\n\n\nReturns the probability of symbol error for the snr per bit γb and constallation size M for PSK signalling \n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.berqam-Tuple{Any,Any}","page":"Home","title":"DigitalCommunications.berqam","text":"berqam(γb, M)\n\n\nReturns the probability of symbol error for the snr per bit γb and constallation size M for QAM signalling \n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.constellation-Union{Tuple{Modulator{ST,CT}}, Tuple{CT}, Tuple{ST}} where CT where ST","page":"Home","title":"DigitalCommunications.constellation","text":"Plots the constellation diagram of the modulator.\n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.dbtoval-Tuple{Any}","page":"Home","title":"DigitalCommunications.dbtoval","text":"dbtoval(γ)\n\n\nConverts γ from dB value to its real value.\n\nExample\n\njulia> dbtoval(2)  # γ = 2 dB\n1.5848931924611136\n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.invmap-Tuple{AbstractCoding}","page":"Home","title":"DigitalCommunications.invmap","text":"invmap(coding)\n\n\nReturns the inverse of the mapping. Inverse mapping maps the levels to bit chunks. \n\nExample\n\njulia> gray = GrayCoding(3)\nGrayCoding(Dict([0, 1, 1] => 3,[0, 0, 1] => 2,[1, 1, 0] => 5,[0, 0, 0] => 1,[1, 0, 0] => 8,[1, 0, 1] => 7,[0, 1, 0] => 4,[1, 1, 1] => 6))\n\njulia> invmap(gray)\nDict{Int64,Array{Int64,1}} with 8 entries:\n  7 => [1, 0, 1]\n  4 => [0, 1, 0]\n  2 => [0, 0, 1]\n  3 => [0, 1, 1]\n  5 => [1, 1, 0]\n  8 => [1, 0, 0]\n  6 => [1, 1, 1]\n  1 => [0, 0, 0]\n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.plotber-Tuple{}","page":"Home","title":"DigitalCommunications.plotber","text":"plotber(; scheme, snr_per_bit_range, krange, pltkwargs...)\n\n\nPlots the probability of symbol error versus snr per bit for the signaling scheme. snr_per_bit_range is the snr per bit range and krange is the symbol size of the M-ary signalling where M=2^k. \n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.scheme-Union{Tuple{Modulator{ST,CT}}, Tuple{CT}, Tuple{ST}} where CT where ST","page":"Home","title":"DigitalCommunications.scheme","text":"scheme(modulator)\n\n\nReturns scheme of the modulation modulator. \n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.signalset-Tuple{Modulator}","page":"Home","title":"DigitalCommunications.signalset","text":"signalset(modulator)\n\n\nReturns the signal set of the modulator\n\nExample\n\njulia> modulator = Modulator(PSK(), 4)\nModulator{PSK,GrayCoding}(PSK(), 4, GrayCoding(Dict([0, 1] => 2,[1, 1] => 3,[0, 0] => 1,[1, 0] => 4)))\n\njulia> signalset(modulator)\n4-element Array{Array{Float64,1},1}:\n [1.0, 0.0]\n [6.123233995736766e-17, 1.0]\n [-1.0, 1.2246467991473532e-16]\n [-1.8369701987210297e-16, -1.0]\n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.stream_to_symbols-Tuple{Modulator,Any}","page":"Home","title":"DigitalCommunications.stream_to_symbols","text":"stream_to_symbols(modulator, stream)\n\n\nMaps the bit stream into different levels according to the coding of the modulator modulator.\n\nExample\n\njulia> modulator = Modulator(PSK(), 4)  # 4-PSK modulator \nModulator{PSK,GrayCoding}(PSK(), 4, GrayCoding(Dict([0, 1] => 2,[1, 1] => 3,[0, 0] => 1,[1, 0] => 4)))\n\njulia> bits = rand(Bool, 10)\n10-element Array{Bool,1}:\n 0\n 0\n 0\n 1\n 1\n 0\n 1\n 0\n 0\n 0\n\njulia> stream_to_symbols(modulator, bits)\n5-element Array{Int64,1}:\n 1\n 2\n 4\n 4\n 1\n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.symbolsize-Tuple{AbstractScheme}","page":"Home","title":"DigitalCommunications.symbolsize","text":"symbolsize(scheme)\n\n\nReturns the symbols size of scheme.\n\nExample\n\njulia> sch = PSK(4);\n\njulia> symbolsize(sch)\n2\n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.symbolsize-Tuple{Modulator}","page":"Home","title":"DigitalCommunications.symbolsize","text":"symbolsize(modulator)\n\n\nReturns the symbols size of the modulator modulator.\n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.valtodb-Tuple{Any}","page":"Home","title":"DigitalCommunications.valtodb","text":"valtodb(val)\n\n\nConverts val tı dB scale. \n\n\n\n\n\n","category":"method"}]
}
