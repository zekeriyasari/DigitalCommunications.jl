var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = DigitalCommunications","category":"page"},{"location":"#DigitalCommunications","page":"Home","title":"DigitalCommunications","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Modules = [DigitalCommunications]","category":"page"},{"location":"#DigitalCommunications.AWGNChannel","page":"Home","title":"DigitalCommunications.AWGNChannel","text":"mutable struct AWGNChannel\n\nAdditive white Gaussian noise channel. \n\n!!! note If tsample and tsymbol are NaN, then the channel operates in the vector channel mode. Otherwise, the     channel operates in waveform channel mode. \n\nFields\n\nesno::Float64\nValue of the noise mode(may be SNR, EsNo, EbNo in dB\ntsample::Float64\nSampling period of the channel\ntsymbol::Float64\nSymbol duration if channel operates in waveform channel mode\n\n\n\n\n\n","category":"type"},{"location":"#DigitalCommunications.BitGenerator","page":"Home","title":"DigitalCommunications.BitGenerator","text":"struct BitGenerator\n\nBit stream generator \n\nFields\n\nbits::Array{Bool,1}\nGenerated bits\n\n\n\n\n\n","category":"type"},{"location":"#DigitalCommunications.Detector","page":"Home","title":"DigitalCommunications.Detector","text":"struct Detector{T}\n\nBaseband optimal detector. \n\nnote: Note\nIf elements of probs are equal to each other, than detector detects symbols in the maximum likelihood (ML) mode. Otherwise, it detects in the maximum a posterior probabilities (MAP) mode.   \n\nFields\n\nrefs::Any\nBasis reference of the detector\nprobs::Array{Float64,1}\nA priori probabilities of the message symbols\nN0::Float64\n2 times the power spectral density of channel noise\n\n\n\n\n\n","category":"type"},{"location":"#DigitalCommunications.GrayCoding","page":"Home","title":"DigitalCommunications.GrayCoding","text":"struct GrayCoding <: DigitalCommunications.AbstractCoding\n\nGray coding. \n\nFields\n\npairs::Dict{Array{Int64,1},Int64}\n\nExample\n\njulia> gc = GrayCoding(2) \nGrayCoding(Dict([0, 1] => 2,[1, 1] => 3,[0, 0] => 1,[1, 0] => 4))\n\n\n\n\n\n","category":"type"},{"location":"#DigitalCommunications.Modulator","page":"Home","title":"DigitalCommunications.Modulator","text":"struct Modulator{T<:DigitalCommunications.AbstractScheme, S<:DigitalCommunications.AbstractPulse}\n\nBaseband digital modulator.\n\n!!! note tsample determines the type of modulation. If tsample is NaN, the modulator transmits the vectors whose     elements are the coefficients of the expansion of the symbol waveform over the orthogonal basis. Otherwise, the     modulator trasmits the symbol waveform sampled by tsample. \n\nFields\n\nscheme::DigitalCommunications.AbstractScheme\nModulation scheme\npulse::DigitalCommunications.AbstractPulse\nModulation pulse energy\ntsample::Float64\nSampling time.\n\n\n\n\n\n","category":"type"},{"location":"#DigitalCommunications.RaisedCosinePulse","page":"Home","title":"DigitalCommunications.RaisedCosinePulse","text":"struct RaisedCosinePulse <: DigitalCommunications.AbstractPulse\n\nRaised coise pulse shapse of the form, \n\n    p(t) = \n    begincases \n    dracA2(1 - cos(w t)  0 leq t leq T \n    0  othersie \n    endcases\n\nFields\n\namplitude::Float64\nduration::Float64\n\n\n\n\n\n","category":"type"},{"location":"#DigitalCommunications.RectangularPulse","page":"Home","title":"DigitalCommunications.RectangularPulse","text":"struct RectangularPulse <: DigitalCommunications.AbstractPulse\n\nRectangularPulse pulse shape of the form,\n\n    p(t) = \n    begincases\n    A  0 leq t leq T \n    0  othersie \n    endcases\n\nwhere A is the amplitude and T is the pulse duration.\n\nFields\n\namplitude::Float64\nAmplitude\nduration::Float64\nPeriod\n\n\n\n\n\n","category":"type"},{"location":"#DigitalCommunications.SymbolGenerator","page":"Home","title":"DigitalCommunications.SymbolGenerator","text":"struct SymbolGenerator\n\nSymbol generator \n\nFields\n\nsymbols::Array{Int64,1}\nGenerated symbols\n\n\n\n\n\n","category":"type"},{"location":"#DigitalCommunications.Q-Tuple{Any}","page":"Home","title":"DigitalCommunications.Q","text":"Q(x)\n\n\nQ-function defined as. \n\n    Q(x) = int_x^infty exp(-dfracx^22) dx\n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.alphabet","page":"Home","title":"DigitalCommunications.alphabet","text":"Returns the alphabet of scheme.\n\nExample\n\njulia> scheme = PSK(4)\n4-PSK\n\njulia> alphabet(scheme)\n4-element Array{Array{Float64,1},1}:\n [1.0, 0.0]\n [6.123233995736766e-17, 1.0]\n [-1.0, 1.2246467991473532e-16]\n [-1.8369701987210297e-16, -1.0]\n\n\n\n\n\n","category":"function"},{"location":"#DigitalCommunications.alphabet-Tuple{FSK}","page":"Home","title":"DigitalCommunications.alphabet","text":"alphabet(scheme)\n\n\nReturns 0 0 ldots 1 0 ldots 0  m = 1 ldots M where the index of the nonzero element is m and M is the constellation size of the scheme.\n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.alphabet-Tuple{PSK}","page":"Home","title":"DigitalCommunications.alphabet","text":"alphabet(scheme)\n\n\nReturns cos(theta_m) sin(theta_m)  m = 1 ldots M where theta_m = dfrac2pi(m - 1)M and M is the constellation size of the scheme.\n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.alphabet-Tuple{QAM}","page":"Home","title":"DigitalCommunications.alphabet","text":"alphabet(scheme)\n\n\nReturns 2m - 1 - M 2n - 1 - M  m n = 1 ldots M where M is the constellation size of the scheme.\n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.alphabet-Tuple{Union{ASK, PAM}}","page":"Home","title":"DigitalCommunications.alphabet","text":"alphabet(scheme)\n\n\nReturns 2m - 1 - M  m = 1 ldots M where M is constellation size of scheme.\n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.bandwidth-Tuple{Union{RaisedCosinePulse, RectangularPulse}}","page":"Home","title":"DigitalCommunications.bandwidth","text":"bandwidth(pulse)\n\n\nReturns the effetive bandwidth of the pulse in units of Hz.\n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.basis-Union{Tuple{Modulator{T,S}}, Tuple{S}, Tuple{T}} where S where T","page":"Home","title":"DigitalCommunications.basis","text":"basis(modulator)\n\n\nReturns basis modulator \n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.berask-Tuple{Any,Any}","page":"Home","title":"DigitalCommunications.berask","text":"berask(γb, M)\n\n\nReturns the probability of symbol error for the snr per bit γb and constallation size M for ASK and PAM signalling \n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.berfsk-Tuple{Any,Any}","page":"Home","title":"DigitalCommunications.berfsk","text":"berfsk(γs, M)\n\n\nReturns the probability of symbol error for the snr per bit γb and constallation size M for FSK signalling \n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.berpsk-Tuple{Any,Any}","page":"Home","title":"DigitalCommunications.berpsk","text":"berpsk(γs, M)\n\n\nReturns the probability of symbol error for the snr per bit γb and constallation size M for PSK signalling \n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.berqam-Tuple{Any,Any}","page":"Home","title":"DigitalCommunications.berqam","text":"berqam(γb, M)\n\n\nReturns the probability of symbol error for the snr per bit γb and constallation size M for QAM signalling \n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.constellation-Tuple{T} where T<:DigitalCommunications.AbstractScheme","page":"Home","title":"DigitalCommunications.constellation","text":"constellation(scheme)\n\n\nPlots the constellation diagram of the modulator.\n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.constelsize-Tuple{DigitalCommunications.AbstractScheme}","page":"Home","title":"DigitalCommunications.constelsize","text":"constelsize(scheme)\n\n\nReturns the symbols size of scheme.\n\nExample\n\njulia> sch = PSK(4);\n\njulia> constelsize(sch)\n4\n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.constelsize-Tuple{GrayCoding}","page":"Home","title":"DigitalCommunications.constelsize","text":"constelsize(coding)\n\n\nReturns constellation size of the coding.\n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.constelsize-Tuple{Modulator}","page":"Home","title":"DigitalCommunications.constelsize","text":"constelsize(modulator)\n\n\nReturns the constellation size of modulator\n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.dbtoval-Tuple{Any}","page":"Home","title":"DigitalCommunications.dbtoval","text":"dbtoval(γ)\n\n\nConverts γ from dB value to its real value.\n\nExample\n\njulia> dbtoval(2)  # γ = 2 dB\n1.5848931924611136\n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.energy","page":"Home","title":"DigitalCommunications.energy","text":"energy(s)\nenergy(s, ts)\n\n\nComputes the energy of the discrete time signal s sampled with ts (defaults to 1) seconds. \n\n\n\n\n\n","category":"function"},{"location":"#DigitalCommunications.energy-Tuple{RectangularPulse}","page":"Home","title":"DigitalCommunications.energy","text":"energy(pulse)\n\n\nReturns the energy of the pulse pulse\n\nExample\n\n\n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.invmap-Tuple{DigitalCommunications.AbstractCoding}","page":"Home","title":"DigitalCommunications.invmap","text":"invmap(coding)\n\n\nReturns the inverse of the mapping. Inverse mapping maps the levels to bit chunks. \n\nExample\n\njulia> gray = GrayCoding(3)\nGrayCoding(Dict([0, 1, 1] => 3,[0, 0, 1] => 2,[1, 1, 0] => 5,[0, 0, 0] => 1,[1, 0, 0] => 8,[1, 0, 1] => 7,[0, 1, 0] => 4,[1, 1, 1] => 6))\n\njulia> invmap(gray)\nDict{Int64,Array{Int64,1}} with 8 entries:\n  7 => [1, 0, 1]\n  4 => [0, 1, 0]\n  2 => [0, 0, 1]\n  3 => [0, 1, 1]\n  5 => [1, 1, 0]\n  8 => [1, 0, 0]\n  6 => [1, 1, 1]\n  1 => [0, 0, 0]\n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.isml-Tuple{Detector}","page":"Home","title":"DigitalCommunications.isml","text":"isml(detector)\n\n\nReturns true if detector is a maximum likelihood detector, i.e, a priori probabilities of its reference refs are equal.\n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.iswaveform-Tuple{Modulator}","page":"Home","title":"DigitalCommunications.iswaveform","text":"iswaveform(modulator)\n\n\nReturns true if modulator a waveform modulator \n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.plotber-Tuple{}","page":"Home","title":"DigitalCommunications.plotber","text":"plotber(; scheme, snr_per_bit_range, krange, pltkwargs...)\n\n\nPlots the probability of symbol error versus snr per bit for the signaling scheme. snr_per_bit_range is the snr per bit range and krange is the symbol size of the M-ary signalling where M=2^k. \n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.scheme-Tuple{Modulator}","page":"Home","title":"DigitalCommunications.scheme","text":"scheme(modulator)\n\n\nReturns scheme of the modulation modulator. \n\n\n\n\n\n","category":"method"},{"location":"#DigitalCommunications.valtodb-Tuple{Any}","page":"Home","title":"DigitalCommunications.valtodb","text":"valtodb(val)\n\n\nConverts val tı dB scale. \n\n\n\n\n\n","category":"method"}]
}
